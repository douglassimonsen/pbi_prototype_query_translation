{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":"<p>This is a single use library to translate the Prototype Query objects found in the Layout json to DAX that can be run against a SSAS instance. It requires a running SSAS instance.</p>"},{"location":"#example","title":"Example","text":"Input Prototype Query <p>In this example, you can see the 5 attributes (+ the version) that roughly correspond to their name equivalents in SQL. Currently, it's ambiguous what the <code>Transform</code> section is used for. </p> <p>Note that only the <code>From</code> section references the table names directly: the other sections use the From entity name, generally the first letter of the table name as a reference.</p> <pre><code>{\n    \"Version\": 2,\n    \"From\": [\n        {\n            \"Entity\": \"Date\",\n            \"Name\": \"d\",\n            \"Type\": 0\n        },\n        {\n            \"Entity\": \"Sales\",\n            \"Name\": \"s\",\n            \"Type\": 0\n        }\n    ],\n    \"Select\": [\n        {\n            \"Aggregation\": {\n                \"Expression\": {\n                    \"Column\": {\n                        \"Expression\": {\n                            \"SourceRef\": {\n                                \"Source\": \"s\"\n                            }\n                        },\n                        \"Property\": \"Sales Amount\"\n                    }\n                },\n                \"Function\": 0\n            },\n            \"Name\": \"Sum(Sales.Sales Amount)\"\n        },\n        {\n            \"Measure\": {\n                \"Expression\": {\n                    \"SourceRef\": {\n                        \"Source\": \"s\"\n                    }\n                },\n                \"Property\": \"Sales Amount by Due Date\"\n            },\n            \"Name\": \"Sales.Sales Amount by Due Date\"\n        },\n        {\n            \"HierarchyLevel\": {\n                \"Expression\": {\n                    \"Hierarchy\": {\n                        \"Expression\": {\n                            \"SourceRef\": {\n                                \"Source\": \"d\"\n                            }\n                        },\n                        \"Hierarchy\": \"Fiscal\"\n                    }\n                },\n                \"Level\": \"Month\"\n            },\n            \"Name\": \"Date.Fiscal.Month\"\n        }\n    ],\n    \"Where\": [\n        {\n            \"Condition\": {\n                \"In\": {\n                    \"Expressions\": [\n                        {\n                            \"Column\": {\n                                \"Expression\": {\n                                    \"SourceRef\": {\n                                        \"Source\": \"d\"\n                                    }\n                                },\n                                \"Property\": \"Fiscal Year\"\n                            }\n                        }\n                    ],\n                    \"Values\": [\n                        [\n                            {\n                                \"Literal\": {\n                                    \"Value\":\"'FY2019'\"\n                                }\n                            }\n                        ]\n                    ]\n                }\n            }\n        }\n    ],\n    \"OrderBy\": [],\n    \"Transform\":[]\n}\n\n```json\n{\n\"Version\": 2,\n\"From\": [\n    {\n    \"Entity\": \"Date\",\n    \"Name\": \"d\",\n    \"Type\": 0\n    },\n    {\n    \"Entity\": \"Sales\",\n    \"Name\": \"s\",\n    \"Type\": 0\n    }\n],\n\"Select\": [\n    {\n    \"Aggregation\": {\n        \"Expression\": {\n        \"Column\": {\n            \"Expression\": {\n            \"SourceRef\": {\n                \"Source\": \"s\"\n            }\n            },\n            \"Property\": \"Sales Amount\"\n        }\n        },\n        \"Function\": 0\n    },\n    \"Name\": \"Sum(Sales.Sales Amount)\"\n    },\n    {\n    \"Measure\": {\n        \"Expression\": {\n        \"SourceRef\": {\n            \"Source\": \"s\"\n        }\n        },\n        \"Property\": \"Sales Amount by Due Date\"\n    },\n    \"Name\": \"Sales.Sales Amount by Due Date\"\n    },\n    {\n    \"HierarchyLevel\": {\n        \"Expression\": {\n        \"Hierarchy\": {\n            \"Expression\": {\n            \"SourceRef\": {\n                \"Source\": \"d\"\n            }\n            },\n            \"Hierarchy\": \"Fiscal\"\n        }\n        },\n        \"Level\": \"Month\"\n    },\n    \"Name\": \"Date.Fiscal.Month\"\n    }\n],\n\"Where\": [\n    {\n    \"Condition\": {\n        \"In\": {\n        \"Expressions\": [\n            {\n            \"Column\": {\n                \"Expression\": {\n                \"SourceRef\": {\n                    \"Source\": \"d\"\n                }\n                },\n                \"Property\": \"Fiscal Year\"\n            }\n            }\n        ],\n        \"Values\": [\n            [\n            {\n                \"Literal\": {\n                \"Value\": \"'FY2019'\"\n                }\n            }\n            ]\n        ]\n        }\n    }\n    }\n],\n\"OrderBy\": [],\n\"Transform\": []\n}\n</code></pre> DAX Result <pre><code>DEFINE\n        VAR __DS0FilterTable =\n                TREATAS({\"FY2019\"}, 'Date'[Fiscal Year])\n\n        VAR __DS0Core =\n                SUMMARIZECOLUMNS(\n                        'Date'[Month],\n                        __DS0FilterTable,\n                        \"SumSales_Amount\", CALCULATE(SUM('Sales'[Sales Amount])),\n                        \"Sales_Amount_by_Due_Date\", 'Sales'[Sales Amount by Due Date]\n                )\n\nEVALUATE\n        __DS0Core\n</code></pre> Column Mapping Result <p>The column mapping is a dictionary that maps the names of the columns in the SELECT statement to the DAX column names. This is necessary to map the DAX results back to the original query structure.</p> <pre><code>{\n    \"Sum(Sales.Sales Amount)\": \"[SumSales_Amount]\",\n    \"Sales.Sales Amount by Due Date\": \"[Sales_Amount_by_Due_Date]\",\n    \"Date.Fiscal.Month\": \"Date[Month]\"\n}\n</code></pre>"},{"location":"api/","title":"Python API","text":""},{"location":"api/#pbi_prototype_query_translation.main.prototype_query","title":"prototype_query","text":"<pre><code>prototype_query(query: str, db_name: str, port: int) -&gt; DataViewQueryTranslationResult\n</code></pre> <p>Main entrypoint for this library.</p> Source code in <code>pbi_prototype_query_translation\\main.py</code> <pre><code>def prototype_query(query: str, db_name: str, port: int) -&gt; TranslationResult:\n    \"\"\"Main entrypoint for this library.\"\"\"\n    ret = PrototypeQuery.Translate(query, db_name, port, SOURCE_FOLDER)\n    return TranslationResult(ret)\n</code></pre>"},{"location":"c_sharp_api/","title":"C# API","text":""},{"location":"c_sharp_api/#pbi_prototype_query_translation.Translation.CSharpDict","title":"CSharpDict","text":"<p>The standard C# dictionary type.</p> Source code in <code>pbi_prototype_query_translation\\Translation.pyi</code> <pre><code>class CSharpDict:\n    \"\"\"The standard C# dictionary type.\"\"\"\n\n    Keys: list[str]\n    \"\"\"The keys of the dictionary as a list.\"\"\"\n\n    Values: list[str]\n    \"\"\"The values of the dictionary as a list.\"\"\"\n</code></pre>"},{"location":"c_sharp_api/#pbi_prototype_query_translation.Translation.CSharpDict.Keys","title":"Keys  <code>instance-attribute</code>","text":"<pre><code>Keys: list[str]\n</code></pre> <p>The keys of the dictionary as a list.</p>"},{"location":"c_sharp_api/#pbi_prototype_query_translation.Translation.CSharpDict.Values","title":"Values  <code>instance-attribute</code>","text":"<pre><code>Values: list[str]\n</code></pre> <p>The values of the dictionary as a list.</p>"},{"location":"c_sharp_api/#pbi_prototype_query_translation.Translation.DataViewQueryTranslationResult","title":"DataViewQueryTranslationResult","text":"<p>Result of the query translation.</p> Source code in <code>pbi_prototype_query_translation\\Translation.pyi</code> <pre><code>class DataViewQueryTranslationResult:\n    \"\"\"Result of the query translation.\"\"\"\n\n    DaxExpression: str\n    \"\"\"The translated DAX expression for the given SSAS instance.\"\"\"\n\n    SelectNameToDaxColumnName: CSharpDict\n    \"\"\"Mapping from the names of the columns in the SELECT statement to the DAX column names.\"\"\"\n</code></pre>"},{"location":"c_sharp_api/#pbi_prototype_query_translation.Translation.DataViewQueryTranslationResult.DaxExpression","title":"DaxExpression  <code>instance-attribute</code>","text":"<pre><code>DaxExpression: str\n</code></pre> <p>The translated DAX expression for the given SSAS instance.</p>"},{"location":"c_sharp_api/#pbi_prototype_query_translation.Translation.DataViewQueryTranslationResult.SelectNameToDaxColumnName","title":"SelectNameToDaxColumnName  <code>instance-attribute</code>","text":"<pre><code>SelectNameToDaxColumnName: CSharpDict\n</code></pre> <p>Mapping from the names of the columns in the SELECT statement to the DAX column names.</p>"},{"location":"c_sharp_api/#pbi_prototype_query_translation.Translation.PrototypeQuery","title":"PrototypeQuery","text":"<p>Object representing a query prototype on the C# side.</p> Source code in <code>pbi_prototype_query_translation\\Translation.pyi</code> <pre><code>class PrototypeQuery:\n    \"\"\"Object representing a query prototype on the C# side.\"\"\"\n\n    @staticmethod\n    def Translate(\n        query: str, dbName: str, port: int, workingDirectory: str | None = None\n    ) -&gt; DataViewQueryTranslationResult: ...\n    \"\"\"Translates a query to DAX expression.\"\"\"\n</code></pre>"}]}